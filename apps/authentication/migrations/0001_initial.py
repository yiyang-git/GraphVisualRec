# Generated by Django 5.0 on 2024-06-01 21:17

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='JobFunction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_function_code', models.CharField(blank=True, db_column='Job Function Code', max_length=255, null=True)),
                ('job_function_description', models.CharField(blank=True, db_column='Job Function Description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'job function',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=32, unique=True, verbose_name='email')),
                ('post', models.CharField(choices=[('General & Transverse Management', '横向管理'), ('Installation & Field Operations', '安装与现场操作'), ('Digital Transformation', '数字化转型'), ('Commercial', '商业员工'), ('Procurement', '采购'), ('Strategy, Innovation, Integration', '战略与创新部门员工'), ('Quality', '质量管控'), ('Project & Bid', '项目与投标'), ('Human Resources', '人力资源'), ('Environment, Health & Safety', '环境、健康和安全'), ('Supply Chain & Planning', '供应链与规划'), ('Legal', '法律部门'), ('Industrial', '工业'), ('Finance', '金融'), ('Engineering', '工程师'), ('Communication', '通信')], max_length=100, verbose_name='post')),
                ('name', models.CharField(max_length=32, verbose_name='name')),
                ('city', models.CharField(default='No city', max_length=64, null=True, verbose_name='city')),
                ('department', models.CharField(blank=True, max_length=100, null=True, verbose_name='Department')),
                ('age', models.IntegerField(blank=True, null=True, verbose_name='Age')),
                ('gender', models.IntegerField(blank=True, null=True, verbose_name='gender')),
                ('experience_years', models.IntegerField(blank=True, null=True, verbose_name='Years of Experience')),
                ('education', models.CharField(blank=True, max_length=15, null=True, verbose_name='education')),
                ('equipmentSkillLevel', models.IntegerField(blank=True, null=True, verbose_name='equipmentSkillLevel')),
                ('techSkillLevel', models.IntegerField(blank=True, null=True, verbose_name='techSkillLevel')),
                ('workenvironment', models.CharField(blank=True, max_length=15, null=True, verbose_name='WorkEnvironment')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', related_query_name='user', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='user', to='auth.permission')),
            ],
            options={
                'db_table': 'logininterface_userform',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedbacktimes', models.IntegerField(default=0, verbose_name='FeedbackTimes')),
                ('comment', models.TextField(verbose_name='Comment')),
                ('datasatisfaction', models.IntegerField(default=5, verbose_name='Datasatisfaction')),
                ('visusatisfaction', models.IntegerField(default=5, verbose_name='Visusatisfaction')),
                ('usersatisfaction', models.IntegerField(default=5, verbose_name='Usersatisfaction')),
                ('dataPreference', models.IntegerField(default=0, verbose_name='DataPreference')),
                ('dashPreference', models.IntegerField(default=0, verbose_name='DashPreference')),
                ('visuPreference', models.IntegerField(default=0, verbose_name='VisuPreference')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='authentication.userform')),
            ],
            options={
                'db_table': 'user_feedback',
            },
        ),
        migrations.CreateModel(
            name='LoginFrequency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=0, verbose_name='Login Count')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_frequencies', to='authentication.userform')),
            ],
            options={
                'db_table': 'login_frequency',
            },
        ),
        migrations.CreateModel(
            name='DataUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_footprint', models.IntegerField(default=0, verbose_name='Count Footprint')),
                ('count_maintenance', models.IntegerField(default=0, verbose_name='Count Maintenance')),
                ('count_manufacturing', models.IntegerField(default=0, verbose_name='Count Manufacturing')),
                ('count_manufacturing_CNC', models.IntegerField(default=0, verbose_name='Count Manufacturing_CNC')),
                ('count_examine', models.IntegerField(default=0, verbose_name='Count Examine')),
                ('count_welding_image', models.IntegerField(default=0, verbose_name='Count Welding Image')),
                ('count_surface_image', models.IntegerField(default=0, verbose_name='Count Contract Image')),
                ('count_welding_data', models.IntegerField(default=0, verbose_name='Count Welding Data')),
                ('count_supplier', models.IntegerField(default=0, verbose_name='Count Supplier')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_usages', to='authentication.userform')),
            ],
            options={
                'db_table': 'data_usage',
            },
        ),
        migrations.CreateModel(
            name='DashboardUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_global_view', models.IntegerField(default=0, verbose_name='Count Global View')),
                ('count_global_map', models.IntegerField(default=0, verbose_name='Count Global Map')),
                ('count_site_info', models.IntegerField(default=0, verbose_name='Count Site Info')),
                ('count_employee', models.IntegerField(default=0, verbose_name='Count Employee')),
                ('count_country', models.IntegerField(default=0, verbose_name='Count Country')),
                ('count_contract', models.IntegerField(default=0, verbose_name='Count Contract')),
                ('count_projectIDCard', models.IntegerField(default=0, verbose_name='ProjectIDCard')),
                ('count_facilities', models.IntegerField(default=0, verbose_name='Facilities')),
                ('count_supplierGIS', models.IntegerField(default=0, verbose_name='SupplierGIS')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_usages', to='authentication.userform')),
            ],
            options={
                'db_table': 'dashboard_usage',
            },
        ),
    ]
